{"version":3,"sources":["actions/tickeractions.js","component/ticker/ticker.js","App.js","reportWebVitals.js","reducer/tickerReducer.js","reducer/index.js","store.js","index.js"],"names":["saveTickerData","tickerData","dispath","type","payload","connect","state","tickerReducer","dispatch","bindActionCreators","useState","socket","setSocket","tickerValues","setTickerData","useEffect","WebSocket","initializeWebSocket","msg","JSON","stringify","event","channel","symbol","onopen","toast","success","position","send","onmessage","evt","message","parse","data","length","Array","isArray","onclose","error","console","log","className","src","alt","toFixed","Math","pow","onClick","e","readyState","OPEN","sk","info","close","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","inintialState","action","combineReducers","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a808f5b.chunk.js","sourcesContent":["export const getTickerData = () => {};\n\nexport const saveTickerData = (tickerData) => {\n  return (dispath) => {\n    dispath({\n      type: \"SAVE_TICKER_DATA\",\n      payload: [...tickerData],\n    });\n  };\n};\n","import React, { useEffect, useState } from \"react\";\nimport \"./ticker.css\";\nimport { saveTickerData } from \"../../actions/tickeractions\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { toast } from \"react-toastify\";\n\nfunction Ticker({ saveTickerData, tickerData }) {\n  const [socket, setSocket] = useState({});\n  const [tickerValues, setTickerData] = useState([]);\n  useEffect(() => {\n    const socket = new WebSocket(\"wss://api-pub.bitfinex.com/ws/2\");\n    setSocket(socket);\n  }, []);\n\n  useEffect(() => {\n    initializeWebSocket();\n  }, [socket]);\n\n  const initializeWebSocket = () => {\n    try {\n      const msg = JSON.stringify({\n        event: \"subscribe\",\n        channel: \"ticker\",\n        symbol: \"tBTCUSD\",\n      });\n      socket.onopen = () => {\n        toast.success(\"Connected\", {\n          position: \"top-right\",\n        });\n        socket.send(msg);\n      };\n      socket.onmessage = (evt) => {\n        const message = JSON.parse(evt.data);\n        if (message && message.length > 0 && Array.isArray(message[1])) {\n          saveTickerData(message[1]);\n        }\n      };\n      socket.onclose = function (evt) {\n        toast.error(\"Disconnected\", {\n          position: \"top-right\",\n        });\n      };\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    setTickerData([...tickerData]);\n  }, [tickerData]);\n\n  const handleConnect = (e) => {\n    if (socket.readyState !== WebSocket.OPEN) {\n      const sk = new WebSocket(\"wss://api-pub.bitfinex.com/ws/2\");\n      setSocket(sk);\n      initializeWebSocket();\n    } else {\n      toast.info(\"Already Connected\");\n    }\n  };\n\n  const handleDisconnect = (e) => {\n    if (socket.readyState === WebSocket.OPEN) {\n      socket.close();\n    } else {\n      toast.info(\"Already Disconnected\");\n    }\n  };\n\n  console.log(tickerData);\n\n  return (\n    <div className=\"ticker-style\">\n      <div className=\"ticker-body-Style p-2\">\n        <div className=\"Container\">\n          <div className=\"row\">\n            <div className=\"col-1\">\n              <div className=\"logo d-flex justify-content-start\">\n                <img src=\"/image/bitcoin.png\" alt=\"Bit coin\" />\n              </div>\n            </div>\n            <div className=\"col-6\">\n              <div className=\"left-content d-flex justify-content-start \">\n                <ul>\n                  <li>\n                    <h5>BCD/USD</h5>\n                  </li>\n                  <li>\n                    <h6>\n                      <span className=\"message\">VOL</span> {tickerValues[7]}{\" \"}\n                      <span className=\"message\">BTC</span>\n                    </h6>\n                  </li>\n                  <li>\n                    <h6>\n                      <span className=\"message\">LOW</span>{\" \"}\n                      {tickerValues[9]?.toFixed(2)}\n                    </h6>\n                  </li>\n                </ul>\n              </div>\n            </div>\n            <div className=\"col-5\">\n              <div className=\"d-flex justify-content-end\">\n                <ul>\n                  <li>\n                    <h5>{tickerValues[6]?.toFixed(2)}</h5>\n                  </li>\n                  <li>\n                    <h6 className=\"high-light-Rate\">\n                      {tickerValues[4]?.toFixed(2)} (\n                      {tickerData[5] &&\n                        (tickerData[5] * Math.pow(10, 2)).toFixed(2)}\n                      %)\n                    </h6>\n                  </li>\n                  <li>\n                    <h6>\n                      <span className=\"message\">HIGH</span>{\" \"}\n                      {tickerValues[8]?.toFixed(2)}\n                    </h6>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"d-flex justify-content-around mt-3\">\n        <button onClick={handleConnect} className=\"btn btn-success\">\n          Connect\n        </button>\n        <button onClick={handleDisconnect} className=\"btn btn-danger\">\n          Disconnect\n        </button>\n      </div>\n    </div>\n  );\n}\nconst mapDispatchToprops = (dispatch) => {\n  return bindActionCreators(\n    {\n      saveTickerData,\n    },\n    dispatch\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    tickerData: state.tickerReducer.tickerData,\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToprops)(Ticker);\n","import React from \"react\";\nimport Ticker from \"./component/ticker/ticker\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Ticker />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const inintialState = {\n  tickerData: [],\n};\n\nconst tickerReducer = (state = inintialState, action) => {\n  const { type } = action;\n  switch (type) {\n    case \"SAVE_TICKER_DATA\":\n      return { ...state, tickerData: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default tickerReducer;\n","import { combineReducers } from \"redux\";\nimport tickerReducer from \"./tickerReducer\";\nexport default combineReducers({ tickerReducer });\n","import { applyMiddleware, createStore } from \"redux\";\nimport rootReducer from \"./reducer\";\nimport thunk from \"redux-thunk\";\nconst inintialState = {};\n// const middleware = [thunk];\nconst store = createStore(rootReducer, inintialState, applyMiddleware(thunk));\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ToastContainer />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}